/* The following code was generated by JFlex 1.4.1 on 2/11/13 1:27 PM */

/*
 * Generated on 2/11/13 1:29 PM
 */
package editor;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class KXIRSyntaxTextAreaTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 1;
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\21\1\10\1\0\1\21\1\17\22\0\1\21\1\60\1\15"+
    "\1\20\1\1\1\41\1\62\1\7\2\42\1\43\1\30\1\41\1\30"+
    "\1\31\1\22\1\4\3\16\4\6\2\3\1\47\1\41\1\63\1\61"+
    "\1\63\1\41\1\20\3\5\1\25\1\27\1\25\5\1\1\24\13\1"+
    "\1\23\2\1\1\42\1\11\1\42\1\17\1\2\1\0\1\35\1\14"+
    "\1\51\1\54\1\34\1\26\1\56\1\44\1\46\1\55\1\1\1\36"+
    "\1\57\1\13\1\53\1\45\1\1\1\33\1\37\1\32\1\12\1\52"+
    "\1\50\1\23\2\1\1\40\1\64\1\40\1\41\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\3\1\4\1\5\3\2\1\6"+
    "\1\7\1\2\1\7\6\2\1\10\10\2\1\7\2\2"+
    "\1\11\1\12\3\11\1\1\1\13\1\3\1\14\1\13"+
    "\1\14\1\13\1\15\1\13\1\4\1\16\1\0\1\4"+
    "\3\2\1\17\11\2\1\20\11\2\4\0\1\1\1\14"+
    "\1\0\2\15\1\4\1\21\2\4\1\16\1\4\11\2"+
    "\1\22\4\2\1\23\3\2\4\0\1\1\1\4\5\2"+
    "\2\0\1\24\1\1\1\4\4\2\2\0\1\1\1\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0173\0\u0212\0\u0247\0\u027c\0\u0173\0\u02b1"+
    "\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u0173\0\u03ef\0\u0424"+
    "\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0562\0\u0597"+
    "\0\u05cc\0\u0601\0\u0173\0\u0636\0\u066b\0\u06a0\0\u06d5\0\u070a"+
    "\0\u070a\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de\0\u0813\0\u0848"+
    "\0\u0173\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0173\0\u0986"+
    "\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e"+
    "\0\237\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1"+
    "\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49"+
    "\0\u0e7e\0\u070a\0\u0eb3\0\u0ee8\0\u0173\0\u0f1d\0\u0f52\0\u087d"+
    "\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa"+
    "\0\u112f\0\u1164\0\237\0\u1199\0\u11ce\0\u1203\0\u1238\0\237"+
    "\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0"+
    "\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588"+
    "\0\u15bd\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730"+
    "\0\u15bd\0\u1765\0\u179a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\4\1\5\1\7\1\10"+
    "\1\3\1\4\1\11\1\12\1\13\1\5\1\13\1\3"+
    "\1\14\1\15\3\4\1\16\1\4\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\4\1\25\1\26\1\13\1\26"+
    "\1\17\1\4\1\27\1\30\1\13\1\31\1\32\1\33"+
    "\1\34\3\4\1\35\1\36\1\37\1\40\1\37\1\41"+
    "\10\42\1\43\15\42\1\44\15\42\1\45\3\42\1\46"+
    "\14\42\7\3\2\0\4\3\1\0\1\3\1\0\1\3"+
    "\2\0\5\3\2\0\6\3\4\0\3\3\1\0\10\3"+
    "\5\0\1\3\6\4\2\0\1\47\3\4\1\0\1\4"+
    "\1\0\1\3\2\0\5\4\2\0\6\4\4\0\3\4"+
    "\1\0\10\4\5\0\3\50\2\5\1\50\1\5\2\0"+
    "\4\50\1\0\1\5\1\0\1\50\2\0\1\50\1\51"+
    "\2\52\1\53\1\0\1\54\2\50\1\53\1\50\1\51"+
    "\1\50\4\0\3\50\1\0\4\50\1\52\3\50\5\0"+
    "\3\50\1\55\1\56\1\50\1\56\2\0\4\50\1\0"+
    "\1\56\1\0\1\50\2\0\1\57\1\51\2\52\1\53"+
    "\1\0\1\54\2\50\1\53\1\50\1\51\1\50\4\0"+
    "\3\50\1\0\4\50\1\52\3\50\5\0\7\60\1\61"+
    "\1\62\1\63\53\60\65\0\1\3\6\4\2\0\1\47"+
    "\1\64\2\4\1\0\1\4\1\0\1\3\2\0\5\4"+
    "\2\0\2\4\1\65\3\4\4\0\3\4\1\0\10\4"+
    "\5\0\1\3\6\4\2\0\1\47\3\4\1\0\1\4"+
    "\1\0\1\3\2\0\5\4\2\0\6\4\4\0\3\4"+
    "\1\0\3\4\1\66\4\4\26\0\1\14\65\0\1\67"+
    "\42\0\1\3\6\4\2\0\1\47\3\4\1\0\1\4"+
    "\1\0\1\3\2\0\5\4\2\0\3\4\1\23\2\4"+
    "\4\0\3\4\1\0\10\4\10\0\2\54\1\0\1\54"+
    "\7\0\1\54\46\0\1\3\6\4\2\0\1\47\3\4"+
    "\1\0\1\4\1\0\1\3\2\0\5\4\2\0\1\4"+
    "\1\70\4\4\4\0\1\71\2\4\1\0\10\4\5\0"+
    "\1\3\6\4\2\0\1\47\3\4\1\0\1\4\1\0"+
    "\1\3\2\0\5\4\2\0\2\4\1\72\3\4\4\0"+
    "\3\4\1\0\10\4\5\0\1\3\6\4\2\0\1\47"+
    "\3\4\1\0\1\4\1\0\1\3\2\0\5\4\2\0"+
    "\4\4\1\73\1\4\4\0\3\4\1\0\10\4\5\0"+
    "\1\3\6\4\2\0\1\47\3\4\1\0\1\4\1\0"+
    "\1\3\2\0\5\4\2\0\1\74\5\4\4\0\3\4"+
    "\1\0\10\4\5\0\1\3\6\4\2\0\1\47\3\4"+
    "\1\0\1\4\1\0\1\3\2\0\5\4\2\0\1\75"+
    "\5\4\4\0\3\4\1\0\10\4\5\0\1\3\6\4"+
    "\2\0\1\47\1\76\2\4\1\0\1\4\1\0\1\3"+
    "\2\0\5\4\2\0\1\4\1\77\4\4\4\0\3\4"+
    "\1\0\10\4\5\0\1\3\6\4\2\0\1\47\1\4"+
    "\1\100\1\4\1\0\1\4\1\0\1\3\2\0\3\4"+
    "\1\101\1\4\2\0\1\102\5\4\4\0\3\4\1\0"+
    "\10\4\5\0\1\3\6\4\2\0\1\47\3\4\1\0"+
    "\1\4\1\0\1\3\2\0\5\4\2\0\6\4\4\0"+
    "\1\103\2\4\1\0\10\4\5\0\1\3\6\4\2\0"+
    "\1\47\3\4\1\0\1\4\1\0\1\3\2\0\5\4"+
    "\2\0\4\4\1\104\1\4\4\0\1\105\1\4\1\106"+
    "\1\0\3\4\1\107\4\4\5\0\1\3\6\4\2\0"+
    "\1\47\3\4\1\0\1\4\1\0\1\3\2\0\5\4"+
    "\2\0\6\4\4\0\3\4\1\0\3\4\1\110\4\4"+
    "\5\0\1\3\6\4\2\0\1\47\2\4\1\111\1\0"+
    "\1\4\1\0\1\3\2\0\5\4\2\0\6\4\4\0"+
    "\3\4\1\0\10\4\5\0\1\3\6\4\2\0\1\47"+
    "\3\4\1\0\1\4\1\0\1\3\2\0\5\4\2\0"+
    "\3\4\1\112\2\4\4\0\3\4\1\0\10\4\66\0"+
    "\1\17\65\0\1\17\66\0\1\17\10\42\1\0\15\42"+
    "\1\0\15\42\1\0\3\42\1\0\14\42\32\0\1\113"+
    "\13\0\1\114\50\0\1\115\102\0\1\116\14\0\7\3"+
    "\2\0\1\3\1\117\2\3\1\0\1\3\1\0\1\3"+
    "\2\0\5\3\2\0\6\3\4\0\3\3\1\0\10\3"+
    "\5\0\7\50\2\0\4\50\1\0\1\50\1\0\1\50"+
    "\2\0\5\50\2\0\6\50\4\0\3\50\1\0\10\50"+
    "\5\0\3\50\2\120\1\50\1\120\2\0\4\50\1\0"+
    "\1\120\1\0\1\50\2\0\5\50\1\121\1\0\6\50"+
    "\4\0\3\50\1\0\10\50\5\0\3\50\2\54\1\50"+
    "\1\54\2\0\4\50\1\0\1\54\1\0\1\50\2\0"+
    "\2\50\2\52\1\53\2\0\2\50\1\53\3\50\4\0"+
    "\3\50\1\0\4\50\1\52\3\50\5\0\3\50\2\55"+
    "\1\50\1\55\2\0\4\50\1\0\1\55\1\0\1\50"+
    "\2\0\2\50\2\52\1\53\1\0\1\54\2\50\1\53"+
    "\3\50\4\0\3\50\1\0\4\50\1\52\3\50\5\0"+
    "\3\50\1\55\1\56\1\50\1\56\2\0\4\50\1\0"+
    "\1\56\1\0\1\50\2\0\1\50\1\122\2\52\1\53"+
    "\1\0\1\54\2\50\1\53\1\50\1\122\1\50\4\0"+
    "\3\50\1\0\4\50\1\52\3\50\5\0\3\50\4\123"+
    "\2\0\3\50\1\123\1\0\1\123\1\0\1\50\2\0"+
    "\2\50\3\123\2\0\2\50\2\123\2\50\4\0\3\50"+
    "\1\0\1\50\1\123\2\50\1\123\3\50\5\0\7\124"+
    "\1\125\1\0\54\124\7\0\1\125\55\0\4\124\1\126"+
    "\1\124\1\127\1\130\1\0\1\60\1\131\3\60\1\126"+
    "\7\124\1\60\3\124\2\60\31\124\1\3\6\4\2\0"+
    "\1\47\3\4\1\0\1\4\1\0\1\3\2\0\5\4"+
    "\2\0\4\4\1\132\1\4\4\0\3\4\1\0\10\4"+
    "\5\0\1\3\6\4\2\0\1\47\3\4\1\0\1\4"+
    "\1\0\1\3\2\0\5\4\2\0\6\4\4\0\3\4"+
    "\1\0\1\101\7\4\5\0\1\3\6\4\2\0\1\47"+
    "\3\4\1\0\1\4\1\0\1\3\2\0\5\4\2\0"+
    "\6\4\4\0\3\4\1\0\3\4\1\133\4\4\5\0"+
    "\1\3\6\4\2\0\1\47\1\134\2\4\1\0\1\4"+
    "\1\0\1\3\2\0\5\4\2\0\6\4\4\0\3\4"+
    "\1\0\10\4\5\0\1\3\6\4\2\0\1\47\3\4"+
    "\1\0\1\4\1\0\1\3\2\0\5\4\2\0\6\4"+
    "\4\0\2\4\1\135\1\0\10\4\5\0\1\3\6\4"+
    "\2\0\1\47\3\4\1\0\1\4\1\0\1\3\2\0"+
    "\5\4\2\0\1\136\5\4\4\0\3\4\1\0\10\4"+
    "\5\0\1\3\6\4\2\0\1\47\3\4\1\0\1\4"+
    "\1\0\1\3\2\0\5\4\2\0\5\4\1\134\4\0"+
    "\3\4\1\0\10\4\5\0\1\3\6\4\2\0\1\47"+
    "\3\4\1\0\1\4\1\0\1\3\2\0\5\4\2\0"+
    "\6\4\4\0\3\4\1\0\3\4\1\137\4\4\5\0"+
    "\1\3\6\4\2\0\1\47\3\4\1\0\1\4\1\0"+
    "\1\3\2\0\5\4\2\0\1\4\1\140\4\4\4\0"+
    "\3\4\1\0\10\4\5\0\1\3\6\4\2\0\1\47"+
    "\2\4\1\141\1\0\1\4\1\0\1\3\2\0\5\4"+
    "\2\0\6\4\4\0\3\4\1\0\10\4\5\0\1\3"+
    "\6\4\2\0\1\47\3\4\1\0\1\4\1\0\1\3"+
    "\2\0\5\4\2\0\6\4\4\0\2\4\1\142\1\0"+
    "\10\4\5\0\1\3\6\4\2\0\1\47\3\4\1\0"+
    "\1\4\1\0\1\3\2\0\5\4\2\0\1\143\5\4"+
    "\4\0\3\4\1\0\10\4\5\0\1\3\6\4\2\0"+
    "\1\47\3\4\1\0\1\4\1\0\1\3\2\0\5\4"+
    "\2\0\6\4\4\0\3\4\1\0\3\4\1\144\4\4"+
    "\5\0\1\3\6\4\2\0\1\47\3\4\1\0\1\4"+
    "\1\0\1\3\2\0\5\4\2\0\6\4\4\0\2\4"+
    "\1\145\1\0\10\4\5\0\1\3\6\4\2\0\1\47"+
    "\3\4\1\0\1\4\1\0\1\3\2\0\5\4\2\0"+
    "\3\4\1\146\2\4\4\0\3\4\1\0\10\4\5\0"+
    "\1\3\6\4\2\0\1\47\3\4\1\0\1\4\1\0"+
    "\1\3\2\0\5\4\2\0\3\4\1\147\2\4\4\0"+
    "\3\4\1\0\10\4\5\0\1\3\6\4\2\0\1\47"+
    "\1\4\1\150\1\4\1\0\1\4\1\0\1\3\2\0"+
    "\5\4\2\0\6\4\4\0\3\4\1\0\10\4\5\0"+
    "\1\3\6\4\2\0\1\47\1\151\2\4\1\0\1\4"+
    "\1\0\1\3\2\0\5\4\2\0\6\4\4\0\3\4"+
    "\1\0\10\4\5\0\1\3\6\4\2\0\1\47\3\4"+
    "\1\0\1\4\1\0\1\3\2\0\5\4\2\0\6\4"+
    "\4\0\2\4\1\152\1\0\10\4\5\0\1\3\6\4"+
    "\2\0\1\47\3\4\1\0\1\4\1\0\1\3\2\0"+
    "\5\4\2\0\6\4\4\0\3\4\1\0\5\4\1\153"+
    "\2\4\5\0\1\3\6\4\2\0\1\47\3\4\1\0"+
    "\1\4\1\0\1\3\2\0\5\4\2\0\6\4\4\0"+
    "\2\4\1\106\1\0\10\4\52\0\1\154\55\0\1\155"+
    "\60\0\1\156\102\0\1\157\14\0\3\3\4\160\2\0"+
    "\3\3\1\160\1\0\1\160\1\0\1\3\2\0\2\3"+
    "\3\160\2\0\2\3\2\160\2\3\4\0\3\3\1\0"+
    "\1\3\1\160\2\3\1\160\3\3\5\0\3\50\2\120"+
    "\1\50\1\120\2\0\4\50\1\0\1\120\1\0\1\50"+
    "\2\0\2\50\2\52\1\50\2\0\6\50\4\0\3\50"+
    "\1\0\4\50\1\52\3\50\10\0\2\120\1\0\1\120"+
    "\7\0\1\120\46\0\3\50\4\123\2\0\3\50\1\123"+
    "\1\0\1\123\1\0\1\50\2\0\1\50\1\122\3\123"+
    "\2\0\2\50\2\123\1\122\1\50\4\0\3\50\1\0"+
    "\1\50\1\123\2\50\1\123\3\50\5\0\7\124\1\61"+
    "\1\0\60\124\1\127\1\124\1\127\1\125\1\0\5\124"+
    "\1\127\52\124\1\60\1\124\1\60\1\125\1\0\5\124"+
    "\1\60\51\124\4\161\1\61\1\0\3\124\1\161\1\124"+
    "\1\161\6\124\3\161\4\124\2\161\13\124\1\161\2\124"+
    "\1\161\10\124\1\3\6\4\2\0\1\47\3\4\1\0"+
    "\1\4\1\0\1\3\2\0\5\4\2\0\4\4\1\101"+
    "\1\4\4\0\3\4\1\0\10\4\5\0\1\3\6\4"+
    "\2\0\1\47\3\4\1\0\1\4\1\0\1\3\2\0"+
    "\5\4\2\0\4\4\1\143\1\4\4\0\3\4\1\0"+
    "\10\4\5\0\1\3\6\4\2\0\1\47\3\4\1\0"+
    "\1\4\1\0\1\3\2\0\5\4\2\0\2\4\1\101"+
    "\3\4\4\0\3\4\1\0\10\4\5\0\1\3\6\4"+
    "\2\0\1\47\3\4\1\0\1\4\1\0\1\3\2\0"+
    "\5\4\2\0\5\4\1\101\4\0\3\4\1\0\10\4"+
    "\5\0\1\3\6\4\2\0\1\47\1\162\2\4\1\0"+
    "\1\4\1\0\1\3\2\0\5\4\2\0\6\4\4\0"+
    "\3\4\1\0\10\4\5\0\1\3\6\4\2\0\1\47"+
    "\3\4\1\0\1\4\1\0\1\3\2\0\5\4\2\0"+
    "\6\4\4\0\2\4\1\150\1\0\10\4\5\0\1\3"+
    "\6\4\2\0\1\47\3\4\1\0\1\4\1\0\1\3"+
    "\2\0\5\4\2\0\6\4\4\0\2\4\1\163\1\0"+
    "\10\4\5\0\1\3\6\4\2\0\1\47\3\4\1\0"+
    "\1\4\1\0\1\3\2\0\5\4\2\0\4\4\1\164"+
    "\1\4\4\0\3\4\1\0\10\4\5\0\1\3\6\4"+
    "\2\0\1\47\3\4\1\0\1\4\1\0\1\3\2\0"+
    "\5\4\2\0\6\4\4\0\3\4\1\0\2\4\1\165"+
    "\5\4\5\0\1\3\6\4\2\0\1\47\3\4\1\0"+
    "\1\4\1\0\1\3\2\0\5\4\2\0\3\4\1\150"+
    "\2\4\4\0\3\4\1\0\10\4\5\0\1\3\6\4"+
    "\2\0\1\47\3\4\1\0\1\4\1\0\1\3\2\0"+
    "\5\4\2\0\4\4\1\134\1\4\4\0\3\4\1\0"+
    "\10\4\5\0\1\3\6\4\2\0\1\47\3\4\1\0"+
    "\1\4\1\0\1\3\2\0\5\4\2\0\5\4\1\135"+
    "\4\0\3\4\1\0\10\4\5\0\1\3\6\4\2\0"+
    "\1\47\3\4\1\0\1\4\1\0\1\3\2\0\5\4"+
    "\2\0\1\4\1\143\4\4\4\0\3\4\1\0\10\4"+
    "\5\0\1\3\6\4\2\0\1\47\3\4\1\0\1\4"+
    "\1\0\1\3\2\0\5\4\2\0\1\150\5\4\4\0"+
    "\3\4\1\0\10\4\5\0\1\3\6\4\2\0\1\47"+
    "\3\4\1\0\1\4\1\0\1\3\2\0\5\4\2\0"+
    "\6\4\4\0\3\4\1\0\4\4\1\101\3\4\5\0"+
    "\1\3\6\4\2\0\1\47\3\4\1\0\1\4\1\0"+
    "\1\3\2\0\5\4\2\0\2\4\1\166\3\4\4\0"+
    "\3\4\1\0\10\4\54\0\1\167\51\0\1\154\75\0"+
    "\1\170\50\0\1\171\33\0\3\3\4\172\2\0\3\3"+
    "\1\172\1\0\1\172\1\0\1\3\2\0\2\3\3\172"+
    "\2\0\2\3\2\172\2\3\4\0\3\3\1\0\1\3"+
    "\1\172\2\3\1\172\3\3\5\0\3\124\4\173\1\61"+
    "\1\0\3\124\1\173\1\124\1\173\6\124\3\173\4\124"+
    "\2\173\13\124\1\173\2\124\1\173\10\124\1\3\6\4"+
    "\2\0\1\47\3\4\1\0\1\4\1\0\1\3\2\0"+
    "\5\4\2\0\1\4\1\174\4\4\4\0\3\4\1\0"+
    "\10\4\5\0\1\3\6\4\2\0\1\47\1\4\1\175"+
    "\1\4\1\0\1\4\1\0\1\3\2\0\5\4\2\0"+
    "\6\4\4\0\3\4\1\0\10\4\5\0\1\3\6\4"+
    "\2\0\1\47\3\4\1\0\1\4\1\0\1\3\2\0"+
    "\5\4\2\0\6\4\4\0\2\4\1\176\1\0\10\4"+
    "\5\0\1\3\6\4\2\0\1\47\3\4\1\0\1\4"+
    "\1\0\1\3\2\0\5\4\2\0\3\4\1\177\2\4"+
    "\4\0\3\4\1\0\10\4\5\0\1\3\6\4\2\0"+
    "\1\47\3\4\1\0\1\4\1\0\1\3\2\0\5\4"+
    "\2\0\6\4\4\0\3\4\1\0\1\4\1\100\6\4"+
    "\27\0\1\200\101\0\1\154\7\0\1\167\16\0\1\171"+
    "\1\201\4\171\1\201\2\0\3\171\1\0\1\171\1\0"+
    "\1\201\1\0\6\171\2\201\6\171\1\0\3\201\3\171"+
    "\1\201\10\171\3\201\2\0\3\3\4\202\2\0\3\3"+
    "\1\202\1\0\1\202\1\0\1\3\2\0\2\3\3\202"+
    "\2\0\2\3\2\202\2\3\4\0\3\3\1\0\1\3"+
    "\1\202\2\3\1\202\3\3\5\0\3\124\4\203\1\61"+
    "\1\0\3\124\1\203\1\124\1\203\6\124\3\203\4\124"+
    "\2\203\13\124\1\203\2\124\1\203\10\124\1\3\6\4"+
    "\2\0\1\47\1\4\1\101\1\4\1\0\1\4\1\0"+
    "\1\3\2\0\5\4\2\0\6\4\4\0\3\4\1\0"+
    "\10\4\5\0\1\3\6\4\2\0\1\47\3\4\1\0"+
    "\1\4\1\0\1\3\2\0\5\4\2\0\6\4\4\0"+
    "\3\4\1\0\6\4\1\143\1\4\5\0\1\3\6\4"+
    "\2\0\1\47\3\4\1\0\1\4\1\0\1\3\2\0"+
    "\5\4\2\0\6\4\4\0\3\4\1\0\1\4\1\101"+
    "\6\4\5\0\1\3\6\4\2\0\1\47\3\4\1\0"+
    "\1\4\1\0\1\3\2\0\5\4\2\0\1\134\5\4"+
    "\4\0\3\4\1\0\10\4\27\0\1\171\42\0\3\3"+
    "\4\4\2\0\3\3\1\4\1\0\1\4\1\0\1\3"+
    "\2\0\2\3\3\4\2\0\2\3\2\4\2\3\4\0"+
    "\3\3\1\0\1\3\1\4\2\3\1\4\3\3\5\0"+
    "\3\124\4\60\1\61\1\0\3\124\1\60\1\124\1\60"+
    "\6\124\3\60\4\124\2\60\13\124\1\60\2\124\1\60"+
    "\10\124";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6095];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\5\1\1\11\2\1\1\11\3\1\1\11\6\1"+
    "\1\11\14\1\1\11\15\1\1\11\1\0\4\1\1\11"+
    "\23\1\4\0\2\1\1\0\3\1\1\11\26\1\4\0"+
    "\7\1\2\0\7\1\2\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public KXIRSyntaxTextAreaTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return null;
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			/* No multi-line comments */
			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new DefaultToken();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public KXIRSyntaxTextAreaTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public KXIRSyntaxTextAreaTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { addNullToken(); return firstToken;
          }
        case 21: break;
        case 17: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 22: break;
        case 6: 
          { addToken(Token.WHITESPACE);
          }
        case 23: break;
        case 13: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 24: break;
        case 12: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 25: break;
        case 16: 
          { addToken(Token.RESERVED_WORD);
          }
        case 26: break;
        case 8: 
          { addToken(Token.SEPARATOR);
          }
        case 27: break;
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 28: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 29: break;
        case 15: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 30: break;
        case 19: 
          { addToken(Token.FUNCTION);
          }
        case 31: break;
        case 4: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 32: break;
        case 18: 
          { addToken(Token.DATA_TYPE);
          }
        case 33: break;
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 34: break;
        case 14: 
          { addToken(Token.ERROR_CHAR);
          }
        case 35: break;
        case 20: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 36: break;
        case 11: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 37: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 38: break;
        case 7: 
          { addToken(Token.OPERATOR);
          }
        case 39: break;
        case 9: 
          { 
          }
        case 40: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 132: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 133: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
